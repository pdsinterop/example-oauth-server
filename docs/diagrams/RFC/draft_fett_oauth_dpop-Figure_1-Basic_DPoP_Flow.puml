@startuml

!include ../bootstrap.iuml

group Figure 1: Basic DPoP Flow

  Client o-> "Authorization Server": Ⓐ Token Request (DPoP Proof)
  activate "Authorization Server"
  Client <- "Authorization Server": Ⓑ DPoP-bound Access Token\n(token_type=DPoP)\nPoP Refresh Token for public clients
  deactivate

  activate Client
    Client -> "Resource Server": Ⓒ DPoP-bound Access Token (DPoP Proof)
  deactivate

  activate "Resource Server"
    Client o<- "Resource Server": Ⓓ Protected Resource
  deactivate
end

/'
(A) In the Token Request, the client sends an authorization code
to the authorization server in order to obtain an access token
(and potentially a refresh token).  The client attaches a DPoP
proof to the request in an HTTP header.

(B) The AS binds (sender-constrains) the access token to the
public key claimed by the client in the DPoP proof; that is, the
access token cannot be used without proving possession of the
respective private key.  This is signaled to the client by using
the "token_type" value "DPoP".

If a refresh token is issued to a public client, it is sender-
constrained in the same way.  For confidential clients, refresh
tokens are bound to the "client_id", which is more flexible than
binding it to a particular public key.

(C) If the client wants to use the access token, it has to prove
possession of the private key by, again, adding a header to the
request that carries the DPoP proof.  The resource server needs to
receive information about the public key to which the access token
is bound.  This information is either encoded directly into the
access token (for JWT structured access tokens), or provided at
the token introspection endpoint of the authorization server (not
shown).

(D) The resource server refuses to serve the request if the
signature check fails or the data in the DPoP proof is wrong,
e.g., the request URI does not match the URI claim in the DPoP
proof JWT.

When a refresh token that is sender-constrained using DPoP is used
by the client, the client has to provide a DPoP proof just as in
the case of a resource access.  The new access token will be bound
to the same public key.

'/
@enduml
